package com.salman.hacksieveprovider

import android.database.Cursor
import android.database.sqlite.SQLiteCursor
import android.util.Base64
import androidx.core.database.getBlobOrNull
import androidx.core.database.getFloatOrNull
import androidx.core.database.getIntOrNull
import androidx.core.database.getStringOrNull

object DatabaseHelper {

    fun getValueAsString(cursor: Cursor, columnName: String, encodeBlobToHex: Boolean = true): String? {
        val index = cursor.getColumnIndex(columnName).takeIf { it > -1 } ?: return null
        val type = cursor.getType(index)
        return with(cursor) {
            when (type) {
                SQLiteCursor.FIELD_TYPE_BLOB -> getBlob(index, encodeBlobToHex)
                SQLiteCursor.FIELD_TYPE_INTEGER -> getIntOrNull(index).toString()
                SQLiteCursor.FIELD_TYPE_STRING -> getStringOrNull(index)
                SQLiteCursor.FIELD_TYPE_FLOAT -> getFloatOrNull(index).toString()
                else -> {
                    throw IllegalArgumentException("$columnName doesn't match any type")
                }
            }
        }
    }

    private fun Cursor.getBlob(index: Int, encode: Boolean): String? {
        return if (encode) {
            encodeBlobToHex(getBlobOrNull(index))
        } else {
            getBlobOrNull(index).toString()
        }
    }

    private fun encodeBlobToHex(bytes: ByteArray?): String? {
        if (bytes == null) return null
        val encodedBytes = Base64.encodeToString(bytes, 0)
        val decodedBytes = Base64.decode(encodedBytes, 0)
        return HexConverter.bytesToHex(decodedBytes)
    }
}