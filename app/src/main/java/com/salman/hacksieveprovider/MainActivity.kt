package com.salman.hacksieveprovider

import android.os.Bundle
import android.util.Log
import android.view.ViewGroup
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.google.android.material.chip.Chip
import com.google.android.material.chip.ChipGroup
import com.salman.hacksieveprovider.databinding.ActivityMainBinding
import com.salman.hacksieveprovider.databinding.ViewColumnBinding
import com.salman.hacksieveprovider.databinding.ViewRecordElementBinding
import com.salman.hacksieveprovider.databinding.ViewSeparatorBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class MainActivity : AppCompatActivity() {
    private val binding by lazy {
        ActivityMainBinding.inflate(layoutInflater)
    }

    private val sieveBypass by lazy {
        SieveProviderBypass
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(binding.root)
        lifecycleScope.launch(Dispatchers.IO) {
            sieveBypass.init(this@MainActivity)
            Log.d("SieveBypass", "onCreate: started updating")
            updateColumnNames()
            updateRecords()
            Log.d("SieveBypass", "onCreate: finished updating")
        }
    }

    private suspend fun updateColumnNames() {
        val columnNames = sieveBypass.getDatabaseColumns()
        println(columnNames)
        withContext(Dispatchers.Main) {
            columnNames?.forEach {
                addColumnView(it)
            }
        }
    }

    private suspend fun updateRecords() {
        val records = sieveBypass.getRecords()
        records.forEach(::addRecordView)
    }

    private fun addColumnView(column: String) {
        val view = ViewColumnBinding.inflate(layoutInflater)
        view.root.text = column
        binding.columnsChipGroup.addView(view.root)

    }

    private fun addRecordView(elements: List<String>) = lifecycleScope.launch {
        val chipGroup = ChipGroup(this@MainActivity).apply {
            chipSpacingVertical = 0
        }
        val container = binding.recordsLinearLayout

        val chips = mutableListOf<Chip>()
        coroutineScope {
            for (element in elements) {
                launch {
                    val view = ViewRecordElementBinding.inflate(layoutInflater)
                    view.root.text = element
                    chips.add(view.root)
                }
            }
        }

        chips.forEach(chipGroup::addView)
        container.addView(chipGroup)

        val param = chipGroup.layoutParams as ViewGroup.MarginLayoutParams
        param.setMargins(param.leftMargin,param.topMargin, 10,50)
        chipGroup.layoutParams = param
    }
}